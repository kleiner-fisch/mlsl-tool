# Generated by the Waxeye Parser Generator - version 0.8.0
# www.waxeye.org

from waxeye import Edge, State, FA, WaxeyeParser

class ModelParser (WaxeyeParser):
    start = 0
    eof_check = True
    automata = [FA("start", [State([Edge(20, 1, False)], False),
            State([Edge(1, 2, False)], False),
            State([Edge(2, 3, False)], False),
            State([Edge(3, 4, False)], False),
            State([Edge(4, 4, False),
                Edge(5, 4, False)], True)], FA.LEFT),
        FA("extension", [State([Edge(17, 1, True)], False),
            State([Edge(19, 2, True)], False),
            State([Edge(14, 3, True)], False),
            State([Edge(8, 4, False)], False),
            State([Edge(11, 5, True)], False),
            State([Edge(8, 6, False)], False),
            State([Edge(15, 7, True)], False),
            State([], True)], FA.LEFT),
        FA("lanes", [State([Edge(18, 1, True)], False),
            State([Edge(19, 2, True)], False),
            State([Edge(14, 3, True)], False),
            State([Edge(7, 4, False)], False),
            State([Edge(11, 5, True)], False),
            State([Edge(7, 6, False)], False),
            State([Edge(15, 7, True)], False),
            State([], True)], FA.LEFT),
        FA("ego", [State([Edge(16, 1, True)], False),
            State([Edge(19, 2, True)], False),
            State([Edge(9, 3, False)], False),
            State([], True)], FA.LEFT),
        FA("re_Expr", [State([Edge(12, 1, True)], False),
            State([Edge(7, 2, False)], False),
            State([Edge(11, 3, True)], False),
            State([Edge(8, 4, False)], False),
            State([Edge(11, 5, True)], False),
            State([Edge(8, 6, False)], False),
            State([Edge(11, 7, True)], False),
            State([Edge(9, 8, False)], False),
            State([Edge(13, 9, True)], False),
            State([], True)], FA.LEFT),
        FA("cl_Expr", [State([Edge(14, 1, True)], False),
            State([Edge(7, 2, False)], False),
            State([Edge(11, 3, True)], False),
            State([Edge(8, 4, False)], False),
            State([Edge(11, 5, True)], False),
            State([Edge(8, 6, False)], False),
            State([Edge(11, 7, True)], False),
            State([Edge(9, 8, False)], False),
            State([Edge(15, 9, True)], False),
            State([], True)], FA.LEFT),
        FA("name_Character", [State([Edge([(65, 90), (97, 122)], 1, False),
                Edge([(48, 57)], 1, False),
                Edge(["-", "_"], 1, False)], False),
            State([], True)], FA.PRUNE),
        FA("int", [State([Edge([(48, 57)], 1, False)], False),
            State([Edge([(48, 57)], 1, False),
                Edge(20, 2, False)], False),
            State([], True)], FA.LEFT),
        FA("float", [State([Edge([(48, 57)], 1, False)], False),
            State([Edge([(48, 57)], 1, False),
                Edge(".", 2, False),
                Edge(20, 4, False)], False),
            State([Edge([(48, 57)], 3, False)], False),
            State([Edge([(48, 57)], 3, False),
                Edge(20, 4, False)], False),
            State([], True)], FA.LEFT),
        FA("name", [State([Edge(22, 1, False)], False),
            State([Edge([(65, 90), (97, 122)], 2, False)], False),
            State([Edge(6, 2, False),
                Edge(20, 3, False)], False),
            State([], True)], FA.LEFT),
        FA("keyword", [State([Edge(16, 1, False),
                Edge(17, 1, False),
                Edge(18, 1, False)], False),
            State([], True)], FA.LEFT),
        FA("cOMMA", [State([Edge(",", 1, False)], False),
            State([Edge(20, 2, False)], False),
            State([], True)], FA.VOID),
        FA("lP", [State([Edge("(", 1, False)], False),
            State([Edge(20, 2, False)], False),
            State([], True)], FA.VOID),
        FA("rP", [State([Edge(")", 1, False)], False),
            State([Edge(20, 2, False)], False),
            State([], True)], FA.VOID),
        FA("lB", [State([Edge("[", 1, False)], False),
            State([Edge(20, 2, False)], False),
            State([], True)], FA.VOID),
        FA("rB", [State([Edge("]", 1, False)], False),
            State([Edge(20, 2, False)], False),
            State([], True)], FA.VOID),
        FA("eGO", [State([Edge("e", 1, False)], False),
            State([Edge("g", 2, False)], False),
            State([Edge("o", 3, False)], False),
            State([Edge(20, 4, False)], False),
            State([], True)], FA.VOID),
        FA("eXT", [State([Edge("e", 1, False)], False),
            State([Edge("x", 2, False)], False),
            State([Edge("t", 3, False)], False),
            State([Edge(20, 4, False)], False),
            State([], True)], FA.VOID),
        FA("lANES", [State([Edge("l", 1, False)], False),
            State([Edge("a", 2, False)], False),
            State([Edge("n", 3, False)], False),
            State([Edge("e", 4, False)], False),
            State([Edge("s", 5, False)], False),
            State([Edge(20, 6, False)], False),
            State([], True)], FA.VOID),
        FA("eQ", [State([Edge("=", 1, False)], False),
            State([Edge(20, 2, False)], False),
            State([], True)], FA.VOID),
        FA("space", [State([Edge([(9, 10), "\r", " "], 0, False),
                Edge(21, 0, False)], True)], FA.VOID),
        FA("comment", [State([Edge("/", 1, False)], False),
            State([Edge("*", 2, False)], False),
            State([Edge(23, 3, False),
                Edge("*", 4, False)], False),
            State([Edge(-1, 2, False)], False),
            State([Edge("/", 5, False)], False),
            State([], True)], FA.VOID),
        FA("", [State([Edge(10, 1, False)], False),
            State([], True)], FA.NEG),
        FA("", [State([Edge("*", 1, False)], False),
            State([Edge("/", 2, False)], False),
            State([], True)], FA.NEG)]

    def __init__(self):
        WaxeyeParser.__init__(self, ModelParser.start, ModelParser.eof_check, ModelParser.automata)

